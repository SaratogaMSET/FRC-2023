/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mcljava;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import org.json.JSONObject;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.networktables.BooleanSubscriber;
import edu.wpi.first.networktables.DoubleArraySubscriber;
import edu.wpi.first.networktables.DoublePublisher;
import edu.wpi.first.networktables.DoubleSubscriber;
import edu.wpi.first.networktables.IntegerPublisher;
import edu.wpi.first.networktables.IntegerSubscriber;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableInstance;

public class App {
    private static final NetworkTableInstance inst = NetworkTableInstance.getDefault();

    private static final NetworkTable visionTable = inst.getTable("vision");
    private static final IntegerSubscriber visionIDSub = visionTable.getIntegerTopic("id").subscribe(-1);
    private static final BooleanSubscriber hasTargetsSub = visionTable.getBooleanTopic("hasTargets").subscribe(false);
    private static final IntegerSubscriber tagIDSub = visionTable.getIntegerTopic("tagID").subscribe(-1);
    private static final DoubleArraySubscriber distanceSub = visionTable.getDoubleArrayTopic("distances").subscribe(
            new double[] { -1, -1, -1, -1, -1, -1, -1, -1 });
    private static final DoubleArraySubscriber camposeSub = visionTable.getDoubleArrayTopic("campose").subscribe(
            new double[3]);

    private static final NetworkTable odomTable = inst.getTable("odom");
    private static final IntegerSubscriber odomIDSub = odomTable.getIntegerTopic("id").subscribe(-1);
    private static final DoubleSubscriber odomXSub = odomTable.getDoubleTopic("x").subscribe(0);
    private static final DoubleSubscriber odomYSub = odomTable.getDoubleTopic("y").subscribe(0);
    private static final DoubleSubscriber odomWSub = odomTable.getDoubleTopic("w").subscribe(0);

    private static final NetworkTable estimateTable = inst.getTable("estimated");
    private static final IntegerPublisher estimateIDPub = estimateTable.getIntegerTopic("id").publish();
    private static final DoublePublisher estimateXPub = estimateTable.getDoubleTopic("x").publish();
    private static final DoublePublisher estimateYPub = estimateTable.getDoubleTopic("y").publish();
    private static final DoublePublisher estimateWPub = estimateTable.getDoubleTopic("w").publish();

    private static Pose2d prevOdomPose = new Pose2d();
    private static Pose2d currentOdomPose = new Pose2d();

    public static void main(String[] args) throws IOException {
        // Create a server socket that listens on port 8080
        ServerSocket server = new ServerSocket(8080);
        System.out.println("Server listening on port 8080");

        // Accept a connection from a client
        Socket client = server.accept();
        System.out.println("Client connected");

        // Get the input and output streams of the client
        OutputStream out = client.getOutputStream();
        InputStream in = client.getInputStream();

        // Register a shutdown hook that will be executed when Ctrl+C is pressed
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println("Exiting...");
            try {
                out.close();
                in.close();
                client.close();
                server.close();
            } catch (IOException e) {
                System.out.println("IO exception caught while shutting down: ");
                e.printStackTrace();
            }
        }));

        while (true) {
            JSONObject json = new JSONObject();

            prevOdomPose = currentOdomPose;
            currentOdomPose = new Pose2d(odomXSub.get(), odomYSub.get(), new Rotation2d(odomWSub.get()));
            json.put("OdomID", odomIDSub.get());
            json.put("OdomDeltas", new double[]{
                currentOdomPose.getX() - prevOdomPose.getX(),
                currentOdomPose.getY() - prevOdomPose.getY(),
                currentOdomPose.getRotation().minus(prevOdomPose.getRotation()).getRadians()
            });
            json.put("VisionID", visionIDSub.get());
            json.put("HasTargets", hasTargetsSub.get());
            json.put("TagID", tagIDSub.get());
            json.put("TagDistances", distanceSub.get());
            json.put("Campose", camposeSub.get());

            // Write some data to the client
            out.write((json.toString() + "\n").getBytes());
            out.flush();

            // Read some data from the client
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            JSONObject result = new JSONObject(br.readLine());
            estimateIDPub.set(result.getInt("id"));
            estimateXPub.set(result.getDouble("x"));
            estimateYPub.set(result.getDouble("y"));
            estimateWPub.set(result.getDouble("w"));
            System.out.println(result.toString());
        }
    }
}
