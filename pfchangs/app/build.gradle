/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */
import org.gradle.internal.os.OperatingSystem

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id "edu.wpi.first.GradleRIO" version "2023.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    String frcYear = '2023'
    File frcHome
    if (OperatingSystem.current().isWindows()) {
        String publicFolder = System.getenv('PUBLIC')
        if (publicFolder == null) {
            publicFolder = "C:\\Users\\Public"
        }
        def homeRoot = new File(publicFolder, "wpilib")
        frcHome = new File(homeRoot, frcYear)
    } else {
        def userFolder = System.getProperty("user.home")
        def homeRoot = new File(userFolder, "wpilib")
        frcHome = new File(homeRoot, frcYear)
    }
    def frcHomeMaven = new File(frcHome, 'maven')
    maven {
        name 'frcHome'
        url frcHomeMaven
    }
    maven {
        url "https://frcmaven.wpi.edu/artifactory/release/"
    }
}

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    implementation "edu.wpi.first.thirdparty.frc2023.opencv:opencv-java:4.6.0-4"
    implementation "edu.wpi.first.thirdparty.frc2023.opencv:opencv-jni:4.6.0-4"
    implementation "edu.wpi.first.cscore:cscore-java:2023.2.1"
    implementation "edu.wpi.first.ntcore:ntcore-java:2023.2.1"
    implementation "edu.wpi.first.ntcore:ntcore-jni:2023.2.1"
    implementation "edu.wpi.first.ntcore:ntcore-jni:2023.2.1:${wpi.platforms.desktop}"
    implementation "edu.wpi.first.wpilibj:wpilibj-java:2023.2.1"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:2023.2.1"
    implementation "edu.wpi.first.wpiutil:wpiutil-jni:2023.2.1"
    implementation "edu.wpi.first.wpiutil:wpiutil-jni:2023.2.1:${wpi.platforms.desktop}"
    implementation "edu.wpi.first.hal:hal-java:2023.2.1"
    implementation "edu.wpi.first.hal:hal-jni:2023.2.1"
    implementation "edu.wpi.first.hal:hal-jni:2023.2.1:${wpi.platforms.desktop}"

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

}

application {
    // Define the main class for the application.
    mainClass = 'testclient.App'
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest('testclient.App')
    manifest {
        attributes 'Main-Class': 'testclient.App'
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
